version: 2.1

orbs:
  slack: circleci/slack@3.4.2

executors:
  node:
    docker:
      - image: lambci/lambda:build-nodejs12.x

  terraform:
    docker:
      - image: hashicorp/terraform:0.13.5

commands:
  yarn_install:
    steps:
      - restore_cache:
          key: v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run: yarn install --check-files
      - save_cache:
          key: v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

  install_yarn:
    steps:
      - run:
          name: install yarn
          command: |
            echo 'export PATH=$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH' >> $BASH_ENV
            curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.22.10

  create_secrets_yml:
    steps:
      - run:
          name: create secrets.yml
          command: |
            echo "googleApiKey: ${GOOGLE_API_KEY}" >> secrets.yml
            echo "googleCustomSearchEngineId: ${GOOGLE_CUSTOM_SEARCH_ENGINE_ID}" >> secrets.yml

  setup_aws_config:
    steps:
      - run:
          name: create aws/credentials aws/config
          command: |
            mkdir -p ~/.aws
            echo '[default]'                                       > ~/.aws/credentials
            echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}"         >> ~/.aws/credentials
            echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo '[default]'                                       > ~/.aws/config
            echo "region = us-east-1"                             >> ~/.aws/config

  terraform:
    parameters:
      stage:
        type: string
      command:
        type: string
    steps:
      - run:
          name: terraform << parameters.command >> - << parameters.stage >>
          command: |
            cd ~/project/terraform/envs/<< parameters.stage >>
            terraform << parameters.command >>

jobs:
  test:
    executor: node
    steps:
      - checkout
      - install_yarn
      - yarn_install
      - run: yarn run test
      - slack/status

  lint:
    executor: node
    steps:
      - checkout
      - install_yarn
      - yarn_install
      - run: yarn run lint
      - slack/status

  terraform_plan:
    executor: terraform
    steps:
      - checkout
      - run: apk --update add curl bash
      - setup_aws_config
      - terraform:
          stage: dev
          command: init
      - terraform:
          stage: dev
          command: plan
      - terraform:
          stage: prod
          command: init
      - terraform:
          stage: prod
          command: plan
      - slack/status

  terraform_apply:
    executor: terraform
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - run: apk --update add curl bash
      - setup_aws_config
      - terraform:
          stage: << parameters.stage >>
          command: init
      - terraform:
          stage: << parameters.stage >>
          command: apply -auto-approve
      - slack/status

  deploy:
    machine: true
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - create_secrets_yml
      - run: docker-compose build app infra
      - run: make setup_aws_config
      - run:
          name: yarn install
          command: docker-compose run --rm app yarn install --check-files
      - run:
          name: build ImageMagick layer
          command: |
            docker run --rm \
              --volume "$(pwd)/layers/imageMagick/lib:/lambda/opt/lib" \
              --volume "$(pwd)/layers/imageMagick/bin:/lambda/opt/bin" \
              lambci/yumda:2 yum -y install ImageMagick
      - run:
          name: serverless deploy
          command: docker-compose run --rm app yarn run deploy --stage << parameters.stage >>
      - slack/status

workflows:
  build:
    jobs:
      - test
      - lint
      - terraform_plan

      - slack/approval-notification:
          requires: [test, lint]
      - approval_deploy:
          type: approval
          requires: [test, lint]

      - deploy:
          name: deploy_dev
          stage: dev
          requires: [approval_deploy]
          filters:
            branches:
              ignore: main
      - terraform_apply:
          name: terraform_apply_dev
          stage: dev
          requires: [deploy_dev]
          filters:
            branches:
              ignore: main

      - deploy:
          name: deploy_prod
          stage: prod
          requires: [approval_deploy]
          filters:
            branches:
              only: main
      - terraform_apply:
          name: terraform_apply_prod
          stage: prod
          requires: [deploy_prod]
          filters:
            branches:
              only: main
